{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\PRANAV\\\\C72\\\\C72\\\\screens\\\\BookTransactionScreen.js\";\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport * as firebase from 'firebase';\nimport db from \"../config.js\";\n\nvar TransactionScreen = function (_React$Component) {\n  _inherits(TransactionScreen, _React$Component);\n\n  function TransactionScreen() {\n    var _this;\n\n    _classCallCheck(this, TransactionScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransactionScreen).call(this));\n\n    _this.getCameraPermissions = function _callee(id) {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermissions: status === \"granted\",\n                buttonState: id,\n                scanned: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.handleBarCodeScanned = function _callee2(_ref) {\n      var type, data, buttonState;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              type = _ref.type, data = _ref.data;\n              buttonState = _this.state.buttonState;\n\n              if (buttonState === \"BookId\") {\n                _this.setState({\n                  scanned: true,\n                  scannedBookId: data,\n                  buttonState: 'normal'\n                });\n              } else if (buttonState === \"StudentId\") {\n                _this.setState({\n                  scanned: true,\n                  scannedStudentId: data,\n                  buttonState: 'normal'\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.checkStudentEligibilityForBookIssue = function _callee3() {\n      var studentRef, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(db.collection(\"student\").where(\"studentId\", \"==\", _this.state.scannedStudentId).get());\n\n            case 2:\n              studentRef = _context3.sent;\n              isStudentEligible = \"\";\n\n              if (studentRef.docs.length == 0) {\n                _this.setState({\n                  scannedStudentId: '',\n                  scannedBookId: ''\n                });\n\n                isStudentEligible = false;\n                Alert.alert(\"This Student ID does not exist in the Database.\");\n              } else {\n                studentRef.docs.map(function (doc) {\n                  var student = doc.data();\n\n                  if (student.numberOfBooksIssued < 2) {\n                    isStudentEligible = true;\n                  } else {\n                    isStudentEligible = false;\n                    Alert.alert(\"This student already has two issued books in their possession. No more books can be issued until one or both are returned.\");\n\n                    _this.setState({\n                      scannedStudentId: '',\n                      scannedBookId: ''\n                    });\n                  }\n                });\n              }\n\n              return _context3.abrupt(\"return\", isStudentEligible);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    };\n\n    _this.checkStudentEligibilityForReturn = function _callee4() {\n      var transactionRef, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(db.collection(\"transaction\").where(\"bookId\", \"==\", _this.state.scannedBookId).limit(1).get());\n\n            case 2:\n              transactionRef = _context4.sent;\n              isStudentEligible = \"\";\n              transactionRef.docs.map(function (doc) {\n                var lastBookTransaction = doc.data();\n\n                if (lastBookTransaction.studentId == _this.state.scannedStudentId) {\n                  isStudentEligible = true;\n                } else {\n                  isStudentEligible = false;\n                  Alert.alert(\"This book was never issued to this student.\");\n\n                  _this.setState({\n                    scannedStudentId: '',\n                    scannedBookId: ''\n                  });\n                }\n              });\n              return _context4.abrupt(\"return\", isStudentEligible);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    };\n\n    _this.checkBookEligibility = function _callee5() {\n      var bookRef, transactionType;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(db.collection(\"books\").where(\"bookId\", \"==\", _this.state.scannedBookID).get());\n\n            case 2:\n              bookRef = _context5.sent;\n              transactionType = \"\";\n\n              if (bookRef.docs.length == 0) {\n                transactionType = false;\n                console.log(bookRef.docs.length);\n              } else {\n                bookRef.docs.map(function (doc) {\n                  var book = doc.data();\n\n                  if (book.bookAvailability) {\n                    transactionType = \"issue\";\n                  } else {\n                    transactionType = \"return\";\n                  }\n                });\n              }\n\n              return _context5.abrupt(\"return\", transactionType);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    };\n\n    _this.initiateBookIssue = function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              db.collection(\"transactions\").add({\n                'studentId': _this.state.scannedStudentId,\n                'bookId': _this.state.scannedBookId,\n                'date': firebase.firestore.Timestamp.now().toDate(),\n                'transactionType': \"Issue\"\n              });\n              db.collection(\"books\").doc(_this.state.scannedBookId).update({\n                'bookAvailability': false\n              });\n              db.collection(\"students\").doc(_this.state.scannedStudentId).update({\n                'numberOfBooksIssued': firebase.firestore.FieldValue.increment(1)\n              });\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    };\n\n    _this.initiateBookReturn = function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              db.collection(\"transactions\").add({\n                'studentId': _this.state.scannedStudentId,\n                'bookId': _this.state.scannedBookId,\n                'date': firebase.firestore.Timestamp.now().toDate(),\n                'transactionType': \"Return\"\n              });\n              db.collection(\"books\").doc(_this.state.scannedBookId).update({\n                'bookAvailability': true\n              });\n              db.collection(\"students\").doc(_this.state.scannedStudentId).update({\n                'numberOfBooksIssued': firebase.firestore.FieldValue.increment(-1)\n              });\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    };\n\n    _this.handleTransaction = function _callee8() {\n      var transactionType, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(_this.checkBookEligibility());\n\n            case 2:\n              transactionType = _context8.sent;\n              console.log(\"Transaction Type\", transactionType);\n\n              if (transactionType) {\n                _context8.next = 9;\n                break;\n              }\n\n              Alert.alert(\"This book is not present in the Library Database.\");\n\n              _this.setState({\n                scannedStudentId: '',\n                scannedBookId: ''\n              });\n\n              _context8.next = 20;\n              break;\n\n            case 9:\n              if (!(transactionType === \"issue\")) {\n                _context8.next = 16;\n                break;\n              }\n\n              _context8.next = 12;\n              return _regeneratorRuntime.awrap(_this.checkStudentEligibilityForBookIssue());\n\n            case 12:\n              isStudentEligible = _context8.sent;\n\n              if (isStudentEligible) {\n                _this.initiateBookIssue();\n\n                Alert.alert(\"The book has been issued to the student.\");\n              }\n\n              _context8.next = 20;\n              break;\n\n            case 16:\n              _context8.next = 18;\n              return _regeneratorRuntime.awrap(_this.checkStudentEligibilityForReturn());\n\n            case 18:\n              isStudentEligible = _context8.sent;\n\n              if (isStudentEligible) {\n                _this.initiateBookReturn();\n\n                Alert.alert(\"The book has been returned to the Library.\");\n              }\n\n            case 20:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedBookId: '',\n      scannedStudentId: '',\n      buttonState: 'normal',\n      transactionMessage: ''\n    };\n    return _this;\n  }\n\n  _createClass(TransactionScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var hasCameraPermissions = this.state.hasCameraPermissions;\n      var scanned = this.state.scanned;\n      var buttonState = this.state.buttonState;\n\n      if (buttonState !== \"normal\" && hasCameraPermissions) {\n        return React.createElement(BarCodeScanner, {\n          onBarCodeScanned: scanned ? undefined : this.handleBarCodeScanned,\n          style: StyleSheet.absoluteFillObject,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          }\n        });\n      } else if (buttonState === \"normal\") {\n        return React.createElement(KeyboardAvoidingView, {\n          style: styles.container,\n          behavior: \"padding\",\n          enabled: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          }\n        }, React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          }\n        }, React.createElement(Image, {\n          source: require(\"../assets/booklogo.jpg\"),\n          style: {\n            width: 200,\n            height: 200\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          }\n        }), React.createElement(Text, {\n          style: {\n            textAlign: 'center',\n            fontSize: 30\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          }\n        }, \"WiLi\")), React.createElement(View, {\n          style: styles.inputView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          }\n        }, React.createElement(TextInput, {\n          style: styles.inputBox,\n          placeholder: \"Book ID\",\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              scannedBookId: text\n            });\n          },\n          value: this.state.scannedBookId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          }\n        }), React.createElement(TouchableOpacity, {\n          style: styles.scanButton,\n          onPress: function onPress() {\n            _this2.getCameraPermissions(\"BookId\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          }\n        }, \"Scan\"))), React.createElement(View, {\n          style: styles.inputView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 253\n          }\n        }, React.createElement(TextInput, {\n          style: styles.inputBox,\n          placeholder: \"Student ID\",\n          onChangeText: function onChangeText(text) {\n            return _this2.setState({\n              scannedStudentId: text\n            });\n          },\n          value: this.state.scannedStudentId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          }\n        }), React.createElement(TouchableOpacity, {\n          style: styles.scanButton,\n          onPress: function onPress() {\n            _this2.getCameraPermissions(\"StudentId\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          }\n        }, \"Scan\"))), React.createElement(TouchableOpacity, {\n          style: styles.submitButton,\n          onPress: function _callee9() {\n            var transactionMessage;\n            return _regeneratorRuntime.async(function _callee9$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    transactionMessage = _this2.handleTransaction();\n\n                    _this2.setState({\n                      scannedBookId: '',\n                      scannedStudentId: ''\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          }\n        }, React.createElement(Text, {\n          style: styles.submitButtonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          }\n        }, \"Submit\")));\n      }\n    }\n  }]);\n\n  return TransactionScreen;\n}(React.Component);\n\nexport { TransactionScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  displayText: {\n    fontSize: 15,\n    textDecorationLine: 'underline'\n  },\n  scanButton: {\n    backgroundColor: '#2196F3',\n    padding: 10,\n    margin: 10\n  },\n  buttonText: {\n    fontSize: 15,\n    textAlign: 'center',\n    marginTop: 10\n  },\n  inputView: {\n    flexDirection: 'row',\n    margin: 20\n  },\n  inputBox: {\n    width: 200,\n    height: 40,\n    borderWidth: 1.5,\n    borderRightWidth: 0,\n    fontSize: 20\n  },\n  scanButton: {\n    backgroundColor: '#66BB6A',\n    width: 50,\n    borderWidth: 1.5,\n    borderLeftWidth: 0\n  },\n  submitButton: {\n    backgroundColor: '#FBC02D',\n    width: 100,\n    height: 50\n  },\n  submitButtonText: {\n    padding: 10,\n    textAlign: 'center',\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/PRANAV/C72/C72/screens/BookTransactionScreen.js"],"names":["React","Permissions","BarCodeScanner","firebase","db","TransactionScreen","getCameraPermissions","id","askAsync","CAMERA","status","setState","hasCameraPermissions","buttonState","scanned","handleBarCodeScanned","type","data","state","scannedBookId","scannedStudentId","checkStudentEligibilityForBookIssue","collection","where","get","studentRef","isStudentEligible","docs","length","Alert","alert","map","doc","student","numberOfBooksIssued","checkStudentEligibilityForReturn","limit","transactionRef","lastBookTransaction","studentId","checkBookEligibility","scannedBookID","bookRef","transactionType","console","log","book","bookAvailability","initiateBookIssue","add","firestore","Timestamp","now","toDate","update","FieldValue","increment","initiateBookReturn","handleTransaction","transactionMessage","undefined","StyleSheet","absoluteFillObject","styles","container","require","width","height","textAlign","fontSize","inputView","inputBox","text","scanButton","buttonText","submitButton","submitButtonText","Component","create","flex","justifyContent","alignItems","displayText","textDecorationLine","backgroundColor","padding","margin","marginTop","flexDirection","borderWidth","borderRightWidth","borderLeftWidth","fontWeight","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text,\n   View,\n   TouchableOpacity,\n   TextInput,\n   Image,\n   StyleSheet,\n   KeyboardAvoidingView,\n   ToastAndroid,\n   Alert} from 'react-native';\nimport * as Permissions from 'expo-permissions';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport * as firebase from 'firebase'\nimport db from '../config.js'\n\nexport default class TransactionScreen extends React.Component {\n    constructor(){\n      super();\n      this.state = {\n        hasCameraPermissions: null,\n        scanned: false,\n        scannedBookId: '',\n        scannedStudentId:'',\n        buttonState: 'normal',\n        transactionMessage: ''\n      }\n    }\n\n    getCameraPermissions = async (id) =>{\n      const {status} = await Permissions.askAsync(Permissions.CAMERA);\n      \n      this.setState({\n        /*status === \"granted\" is true when user has granted permission\n          status === \"granted\" is false when user has not granted the permission\n        */\n        hasCameraPermissions: status === \"granted\",\n        buttonState: id,\n        scanned: false\n      });\n    }\n\n    handleBarCodeScanned = async({type, data})=>{\n      const {buttonState} = this.state\n\n      if(buttonState===\"BookId\"){\n        this.setState({\n          scanned: true,\n          scannedBookId: data,\n          buttonState: 'normal'\n        });\n      }\n      else if(buttonState===\"StudentId\"){\n        this.setState({\n          scanned: true,\n          scannedStudentId: data,\n          buttonState: 'normal'\n        });\n      }\n      \n    }\n    checkStudentEligibilityForBookIssue = async()=>{\n      const studentRef = await db.collection(\"student\").where(\"studentId\",\"==\",this.state.scannedStudentId).get()\n      var isStudentEligible = \"\"\n      if(studentRef.docs.length==0){\n        this.setState({\n          scannedStudentId:'',\n          scannedBookId:'',\n        })\n        isStudentEligible = false;\n        Alert.alert(\"This Student ID does not exist in the Database.\")\n      }\n      else{\n        studentRef.docs.map((doc)=>{\n          var student = doc.data();\n          if(student.numberOfBooksIssued < 2){\n            isStudentEligible = true;\n          }\n          else{\n            isStudentEligible = false;\n            Alert.alert(\"This student already has two issued books in their possession. No more books can be issued until one or both are returned.\")\n            this.setState({\n              scannedStudentId:'',\n              scannedBookId:'',\n            })\n          }\n        })\n      }\n      return isStudentEligible;\n    }\n    checkStudentEligibilityForReturn = async()=>{\n      const transactionRef = await db.collection(\"transaction\").where(\"bookId\",\"==\",this.state.scannedBookId).limit(1).get();\n      var isStudentEligible = \"\";\n      transactionRef.docs.map((doc)=>{\n        var lastBookTransaction = doc.data();\n        if(lastBookTransaction.studentId == this.state.scannedStudentId){\n          isStudentEligible = true;\n        }\n        else{\n          isStudentEligible = false;\n          Alert.alert(\"This book was never issued to this student.\")\n          this.setState({\n            scannedStudentId:'',\n            scannedBookId:'',\n          })\n        }\n      })\n      return isStudentEligible;\n    }\n    checkBookEligibility = async()=>{\n      const bookRef = await db.collection(\"books\").where(\"bookId\",\"==\",this.state.scannedBookID).get();\n      var transactionType = \"\";\n      if(bookRef.docs.length == 0){\n        transactionType = false;\n        console.log(bookRef.docs.length);\n      }\n      else{\n        bookRef.docs.map((doc)=>{\n          var book = doc.data();\n          if(book.bookAvailability){\n            transactionType = \"issue\";\n          }\n          else{\n            transactionType = \"return\";\n          }\n        })\n      }\n      return transactionType;\n    }\n\n    initiateBookIssue = async()=>{\n      //add a transaction\n      db.collection(\"transactions\").add({\n        'studentId': this.state.scannedStudentId,\n        'bookId' : this.state.scannedBookId,\n        'date' : firebase.firestore.Timestamp.now().toDate(),\n        'transactionType': \"Issue\"\n      })\n      //change book status\n      db.collection(\"books\").doc(this.state.scannedBookId).update({\n        'bookAvailability': false\n      })\n      //change number  of issued books for student\n      db.collection(\"students\").doc(this.state.scannedStudentId).update({\n        'numberOfBooksIssued': firebase.firestore.FieldValue.increment(1)\n      })\n    }\n\n    initiateBookReturn = async()=>{\n      //add a transaction\n      db.collection(\"transactions\").add({\n        'studentId': this.state.scannedStudentId,\n        'bookId' : this.state.scannedBookId,\n        'date' : firebase.firestore.Timestamp.now().toDate(),\n        'transactionType': \"Return\"\n      })\n      //change book status\n      db.collection(\"books\").doc(this.state.scannedBookId).update({\n        'bookAvailability': true\n      })\n      //change number  of issued books for student\n      db.collection(\"students\").doc(this.state.scannedStudentId).update({\n        'numberOfBooksIssued': firebase.firestore.FieldValue.increment(-1)\n      })\n    }\n\n\n    handleTransaction = async()=>{\n     /* var transactionMessage\n      db.collection(\"books\").doc(this.state.scannedBookId).get()\n      .then((doc)=>{\n          //snapshot.forEach((doc)=>{\n            var book = doc.data()\n            if(book.bookAvailability){\n                this.initiateBookIssue();       \n                transactionMessage = \"Book Issued\"\n                ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n                Alert.alert(transactionMessage)\n            }\n            else{\n                this.initiateBookReturn();\n                transactionMessage = \"Book Returned\"\n                ToastAndroid.show(transactionMessage, ToastAndroid.SHORT);\n                Alert.alert(transactionMessage)\n            }\n      })\n\n      this.setState({\n        transactionMessage: transactionMessage\n      })*/\n      var transactionType = await this.checkBookEligibility();\n      console.log(\"Transaction Type\",transactionType)\n      if(!transactionType){\n        Alert.alert(\"This book is not present in the Library Database.\")\n        this.setState({\n          scannedStudentId:'',\n          scannedBookId:'',\n        })\n      }\n      else if(transactionType === \"issue\"){\n        var isStudentEligible = await this.checkStudentEligibilityForBookIssue();\n        if(isStudentEligible){\n         this.initiateBookIssue();\n         Alert.alert(\"The book has been issued to the student.\") \n        }\n      }\n      else{\n        var isStudentEligible = await this.checkStudentEligibilityForReturn();\n        if (isStudentEligible){\n          this.initiateBookReturn();\n          Alert.alert(\"The book has been returned to the Library.\")\n        }\n      }\n    }\n\n    render() {\n      const hasCameraPermissions = this.state.hasCameraPermissions;\n      const scanned = this.state.scanned;\n      const buttonState = this.state.buttonState;\n\n      if (buttonState !== \"normal\" && hasCameraPermissions){\n        return(\n          <BarCodeScanner\n            onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\n            style={StyleSheet.absoluteFillObject}\n          />\n        );\n      }\n\n      else if (buttonState === \"normal\"){\n        return(\n          <KeyboardAvoidingView  style={styles.container} behavior=\"padding\" enabled>\n            <View>\n              <Image\n                source={require(\"../assets/booklogo.jpg\")}\n                style={{width:200, height: 200}}/>\n              <Text style={{textAlign: 'center', fontSize: 30}}>WiLi</Text>\n            </View>\n            <View style={styles.inputView}>\n            <TextInput \n              style={styles.inputBox}\n              placeholder=\"Book ID\"\n              onChangeText={text =>this.setState({scannedBookId:text})}\n              value={this.state.scannedBookId}/>\n            <TouchableOpacity \n              style={styles.scanButton}\n              onPress={()=>{\n                this.getCameraPermissions(\"BookId\")\n              }}>\n              <Text style={styles.buttonText}>Scan</Text>\n            </TouchableOpacity>\n            </View>\n\n            <View style={styles.inputView}>\n            <TextInput \n              style={styles.inputBox}\n              placeholder=\"Student ID\"\n              onChangeText ={text => this.setState({scannedStudentId:text})}\n              value={this.state.scannedStudentId}/>\n            <TouchableOpacity \n              style={styles.scanButton}\n              onPress={()=>{\n                this.getCameraPermissions(\"StudentId\")\n              }}>\n              <Text style={styles.buttonText}>Scan</Text>\n            </TouchableOpacity>\n            </View>\n            <TouchableOpacity\n              style={styles.submitButton}\n              onPress={async()=>{\n                var transactionMessage = this.handleTransaction();\n                this.setState(\n                  {scannedBookId:'',\n                   scannedStudentId:''})\n              }}>\n          <Text style={styles.submitButtonText}>Submit</Text>\n            </TouchableOpacity>\n          </KeyboardAvoidingView>\n        );\n      }\n    }\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    displayText:{\n      fontSize: 15,\n      textDecorationLine: 'underline'\n    },\n    scanButton:{\n      backgroundColor: '#2196F3',\n      padding: 10,\n      margin: 10\n    },\n    buttonText:{\n      fontSize: 15,\n      textAlign: 'center',\n      marginTop: 10\n    },\n    inputView:{\n      flexDirection: 'row',\n      margin: 20\n    },\n    inputBox:{\n      width: 200,\n      height: 40,\n      borderWidth: 1.5,\n      borderRightWidth: 0,\n      fontSize: 20\n    },\n    scanButton:{\n      backgroundColor: '#66BB6A',\n      width: 50,\n      borderWidth: 1.5,\n      borderLeftWidth: 0\n    },\n    submitButton:{\n      backgroundColor: '#FBC02D',\n      width: 100,\n      height:50\n    },\n    submitButtonText:{\n      padding: 10,\n      textAlign: 'center',\n      fontSize: 20,\n      fontWeight:\"bold\",\n      color: 'white'\n    }\n  });"]},"metadata":{},"sourceType":"module"}